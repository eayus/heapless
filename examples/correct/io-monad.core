λ w0.

    // type IO a = World -o (1 World, a)

    let pure : ∀ A :: Type1. A -> World -o (1 World, A) =
        Λ A. λx. λw. (w, x);

    let bind : ∀ A :: Type1. ∀ B :: Type1. (World -o (1 World, A)) -> (A -> World -o (1 World, B)) -> (World -o (1 World, B)) =
        Λ A. Λ B. λx. λf. λw2.
            let 1 (w1, a) = x w2;
            f a w1;

    let run : (World -o (1 World, Unit)) -> (World -o World) =
        λf. λw. let 1 (w1, u) = f w; w1;
        
    let readInt : World -o (1 World, Int) =
        λw. #readInt[w];
    
    let printInt : Int -> World -o (1 World, Unit) =
        λn. λw. (#printInt[n, w], unit);

    let main : World -o (1 World, Unit) =
        bind @Int @Unit readInt λn.
        bind @Int @Unit readInt λm.
        printInt (n + m);

    run main w0