include "../examples/surface/std.hpl";

data BaudRate =
  | B4800
  | B9600
  | B19200;

class MonadMemory (m :: *1 -> *3) {
    read : Int -> m Int;
    write : Int -> Int -> m Unit;
}

data new RAM (a :: *1) :=
  | RAM (Int -> IO a);

inst MonadMemory RAM {
    read = \i => RAM (\base => readRAM (base + i));
    write = \i x => RAM (\base => writeRAM (base + i) x);
}

let runRAM : [a :: *1]. Int -> RAM a -> IO a =
    \base ram => fold ram { RAM f => f base };

data LCR :=
  | LCR Int Bool Bool Bool Bool;

data LSR :=
  | LSR Bool;

let readReady : LSR -> Bool =
    \lsr => fold lsr {
        LSR b => b;
    };

// Really strange bug?! If we add the remaining fields of LCR we get unsolved meta variables...
let encodeLCR : LCR -> Int = \lcr => fold lcr {
    LCR wl sb pe ep fp =>
        wl | (fromEnum sb >> 2)
           | (fromEnum pe >> 3)
           | (fromEnum ep >> 4)
           | (fromEnum fp >> 5)
};

let encodeLSR : LSR -> Int = \lsr => fold lsr {
    LSR b => fromEnum b;
};

let lcrOffset : Int = 3;
let lsrOffset : Int = 4; // Wrong

// let readLSR : [m :: *1 -> *3]. {MonadMemory m} => m LSR =
//     pure (LSR True);

// Interesting! We can'#t return an LSR in 'm' directly, but we can use CPS to avoid that!
let readLSR2 : [m :: *1 -> *3, a :: *1]. {MonadMemory m} => (LSR -> m a) -> m a =
    \cont => cont (LSR True);


let writeLCR : [m :: *1 -> *3]. {MonadMemory m} => LCR -> m Unit =
    \lcr => write lcrOffset (encodeLCR lcr);

let init : [m :: *1 -> *3]. {Monad m, MonadMemory m} => BaudRate -> m Unit =
    \rate => do {
        // OTher stuff too
        u0 <- writeLCR (LCR 0 False False False False);
        pure It
    };

let take : [m :: *1 -> *2]. {Monad m, MonadMemory m} => m Int =
    let rec wait : m Unit = readLSR2 (\lsr => do {
        if readReady lsr
            then pure It
            else wait
    });
    do { u0 <- wait; read 0 };


// Annoyances:
// Special syntax for Unit
// Giving kinds to type variables for non recursive functions (just pick most general kind?)
// Can't use underscore for binder name
// Do notation don't bind with "<-" if returning a unit
// A name like "recv" is treated by the parser as "rec v". 