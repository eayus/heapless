let id : [a :: *3]. a -> a =
    \x => x;

let n : Int -> Int = id (\x => x);

let const : [a :: *3, b :: *3]. a -> b -> a =
    (\x y => x);

let composeN : [a :: *1]. Int -> (a -> a) -> a -> a =
    \m f =>
        let rec go : Int -> a -> a =
            \n x => if n >= 0
                then go (n - 1) (f x)
                else x;
        go m
    ;

let m : Int = if False then 3 else 4;

data Maybe :=
  | Just (Int -> Int)
  | Nothing;

let foo : Maybe = Nothing;

class Num (a :: *1) {
    add : a -> a -> a;
    sub : a -> a -> a;
}

inst Num Int {
    add = \x y => x + y;
    sub = \x y => x - y;
}

let double : [a :: *1]. {Num a} => a -> a =
    \x => add x x;

let foo : Int = add 3 4;

let name : String = "Ellis";

data Unit =
  | It;

class Monad (m :: *1 -> *2) {
    pure : [a :: *1]. a -> m a;
    bind : [a :: *1, b :: *1]. m a -> (a -> m b) -> m b;
}

let void : [m :: *1 -> *2]. {Monad m} => m Unit =
    pure It;


inst Monad IO {
    pure = ioPure;
    bind = ioBind;
}

let main : IO Unit = do {
    x <- pure It;
    pure x
};

class Printable (a :: *1) {
    print : a -> IO Unit;
}

inst Printable Int {
    print = printInt;
}

inst Printable String {
    print = printStr;
}

inst Printable Char {
    print = printChar;
}

class Eq (a :: *1) {
    eq : a -> a -> Bool;
}

inst Eq Int {
    eq = eqInt;
}

// Join only works on monads which are *1 -> *1, as otherwise m (m a) is invalid.
let join : [m :: *1 -> *1, a :: *1]. {Monad m} => m (m a) -> m a = \x => do {
    y <- x;
    y
};


// Implement FizzBuzz

let divides : Int -> Int -> Bool =
    \n m => remainder n m == 0;


// Not every data type is foldable (non-strictly positive). Perhaps we should define a functor and do the fixpoint pattern.
data rec List :=
  | Nil
  | Cons Int List;

let sum : List -> Int =
    \xs => fold xs {
        Nil => 0;
        Cons n m => n; // TODO: Do a fold and not a case! 'm' is still a List!
    };


// Perhaps the Monad typeclass should work for any i and j:
/*
class Monad (m :: *i -> *j)
*/
// Actually, if we choose the most flexible kind *1 -> *3, everything will be a subtype, is there a disadvantage to this?
//      replicateM_ can still be defined by restricting m to *1 -> *2, which will be a subtype of *1 -> *3.
// Interestingly, Monads are endofunctors, but we can define do-notation, bind and pure for non-endofunctors. What is
// the name of this superset of Monads?
// Perhaps our Monad class should be called "Bindable" or something like that, as it is not theoretically a Monad.

// Is it a relative monad, where the functor it is relative to is the implicit coercion between subkinds?

/*

data rec List (a :: *1) :=
  | Nil
  | Cons a (List a);

class Writable (a :: *1) {
    write : a -> List Char;
}

let print : [a :: *1]. {Writable a} => a -> IO () =
    \x => fold (write x) {
        Nil => pure ();
        Cons c io => do {
            _ <- printChar c;
            io
        }
    };

*/

/*
let step : Int -> IO Unit = \n =>
    let div3 = divides n 3;
    let div5 = divides n 5;
    if div3 then print "Fizz" else
    if div5 then print "Buzz" else
    if div3 && div 5 then print "FizzBuzz" else
    print n;

let fizzbuzz : Int -> IO Unit = \n => traverse step (upto 1 n);
*/

/*
let main : IO () = do {
    n : Int <- read
    m : Int <- read
};
*/

data new Foo := | Foo Int;

let x : Foo = Foo 3;

let boolToInt : Bool -> Int =
    \b => fold b {
        False => 0;
        True => 1;
    };

class To (a :: *1) (b :: *1) {
    to : a -> b;
}

inst To Bool Int {
    to = \b => fold b {
        False => 0;
        True => 1;
    };
}

let bar : Bool -> Int = \b => (to b) * 2;

class Functor (f :: *1 -> *3) {
    map : [a :: *1, b :: *1]. (a -> b) -> f a -> f b;
}

let void : [f :: *1 -> *3, a :: *1]. {Functor f} => f a -> f Unit =
    map (const It);


let recv : [a :: *3]. a -> a = \x => x;

/*
data new Reader (r :: *1) (a :: *2) :=
  | Reader (r -> a);

class MonadReader (r :: *1) (m :: *1 -> *2) {
    ask : m r;
    local : [a :: *1]. (r -> r) -> m a -> m a;
}

let asks : []. {MonadReader r m} => (r -> a) -> m a =
    \f 
*/

// Example: UART

/*
class MonadMemory (m :: *1 -> *2) {
    read : Int -> m Int;
    write : Int -> Int -> m Unit;
}

data RAM (a :: *1) :=
  | RAM (Int -> IO a);

inst MonadMemory RAM {
    read = \i => RAM (\base => readRAM (base + i));
    write = \i x => RAM (\base => writeRAM (base + i) x);
}

let runRAM : [a :: *1]. Int -> RAM a -> IO a =
    \base ram => case ram { RAM f => f base };

data LCR :=
  | LCR Int Bool Bool Bool Bool Bool Bool;

let encodeLCR : LCR -> Int =
    \lcr => case lcr { LCR wl sb pe ep fp sb dl => _ };
*/